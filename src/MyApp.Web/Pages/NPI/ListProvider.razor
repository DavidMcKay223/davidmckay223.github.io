@using MyApp.Application.Interfaces.NPI
@using MyApp.Application.DTOs.NPI
@using MyApp.Domain.Specifications.NPI
@using MyApp.Shared.Interfaces
@using MyApp.Shared.DTOs
@inject IProviderUseCases ProviderUseCases
@inject IStateService StateService
@inject HttpClient Http

<PageTitle>NPI Registry</PageTitle>

<div class="container">
    <h1 class="my-4 text-center">NPI Registry</h1>

    <div class="row g-3">
        <div class="col-md-4">
            <label for="text_city" class="form-label">City</label>
            <InputText id="text_city" class="form-control" @bind-Value="searchCriteria.City" />
        </div>
        <div class="col-md-4">
            <label for="ddl_state" class="form-label">State</label>
            <InputSelect id="ddl_state" class="form-select" @bind-Value="searchCriteria.State">
                <option value="">Select State</option>
                @foreach (var state in states)
                {
                    <option value="@state.Value">@state.Description</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label for="text_postal_code" class="form-label">Zip</label>
            <InputText id="text_postal_code" class="form-control" @bind-Value="searchCriteria.Postal_code" />
        </div>
        <div class="col-md-4">
            <label for="text_npi_number" class="form-label">NPI</label>
            <InputText id="text_npi_number" class="form-control" @bind-Value="searchCriteria.Number" />
        </div>
        <div class="col-md-4">
            <label for="text_organization_name" class="form-label">Organization Name</label>
            <InputText id="text_organization_name" class="form-control" @bind-Value="searchCriteria.Organization_name" />
            <small class="form-text text-muted">Wild Card Search: Add * at the end.</small>
        </div>
        <div class="col-md-4">
            <label for="text_first_name" class="form-label">First Name</label>
            <InputText id="text_first_name" class="form-control" @bind-Value="searchCriteria.First_name" />
        </div>
        <div class="col-md-4">
            <label for="text_last_name" class="form-label">Last Name</label>
            <InputText id="text_last_name" class="form-control" @bind-Value="searchCriteria.Last_name" />
        </div>
        <div class="col-md-4">
            <label for="text_limit" class="form-label">Limit</label>
            <InputText id="text_limit" class="form-control" @bind-Value="searchCriteria.Limit" />
        </div>
        <div class="col-md-4">
            <label for="text_skip" class="form-label">Skip</label>
            <InputText id="text_skip" class="form-control" @bind-Value="searchCriteria.Skip" />
        </div>
    </div>

    <div class="my-3 text-center">
        <button class="btn btn-primary me-2" @onclick="@ButtonSearch">Search</button>
        <button class="btn btn-danger" @onclick="@ButtonReset">Reset</button>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (providers == null || !providers.Any())
    {
        <div class="alert alert-info">No providers found. Please refine your search.</div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var provider in providers)
            {
                <DisplayProvider Provider="@provider"></DisplayProvider>
            }
        </div>
    }
</div>

@code {
    private List<ProviderDto>? providers;
    private SearchProviderCriteria searchCriteria = new SearchProviderCriteria();
    private List<StateDto> states = new List<StateDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        states = StateService.GetStates();
        await LoadProviders();
    }

    private async Task LoadProviders()
    {
        isLoading = true;
        providers = null;
        StateHasChanged();

        try
        {
            providers = await ProviderUseCases.GetProvidersAsync(searchCriteria);
        }
        catch
        {
            // Note: We need to create a proxy server but we dont have access so we using cached data
            providers = await Http.GetFromJsonAsync<List<ProviderDto>>("data/npi_registry.json");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task ButtonReset()
    {
        searchCriteria = new SearchProviderCriteria();
        await LoadProviders();
    }

    async Task ButtonSearch()
    {
        await LoadProviders();
    }
}
