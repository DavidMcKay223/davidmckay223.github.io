@using MyApp.Application.DTOs.Management

@if (TaskItems?.Any() == false)
{
    <p class="text-muted">No TaskItems found.</p>
}
else
{
    <!-- Desktop Table (Hidden on Mobile) -->
    <div class="d-none d-md-block">
        <div class="table-responsive-lg rounded-3 shadow-sm">
            <table class="table table-hover align-middle mb-0">
                <thead class="bg-light">
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Description</th>
                        <th scope="col">Type</th>
                        <th scope="col">Status</th>
                        <th scope="col">Created</th>
                        <th scope="col">Updated</th>
                        <th scope="col" class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var taskItem in TaskItems!)
                    {
                        <tr class="position-relative">
                            <td class="fw-semibold">@taskItem.Title</td>
                            <td class="text-truncate" style="max-width: 260px;" title="@taskItem.Description">
                                @taskItem.Description
                            </td>
                            <td>@taskItem.TaskType</td>
                            <td>
                                <span class="badge @(taskItem.IsCompleted ? "bg-success" : "bg-danger") rounded-pill">
                                    @(taskItem.IsCompleted ? "Completed" : "Pending")
                                </span>
                            </td>
                            <td>@taskItem.CreatedDate.ToString("MMM dd, yyyy")</td>
                            <td>@(taskItem.UpdatedDate?.ToString("MMM dd, yyyy") ?? "N/A")</td>
                            <td class="text-end">
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-primary btn-sm"
                                            @onclick="() => OnEdit.InvokeAsync(taskItem)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm"
                                            @onclick="() => OnDelete.InvokeAsync(taskItem)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Mobile Cards (Hidden on Desktop) -->
    <div class="d-md-none">
        @foreach (var taskItem in TaskItems!)
        {
            <div class="card mb-3 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h5 class="card-title fw-semibold mb-0">@taskItem.Title</h5>
                        <span class="badge @(taskItem.IsCompleted ? "bg-success" : "bg-danger") rounded-pill">
                            @(taskItem.IsCompleted ? "Completed" : "Pending")
                        </span>
                    </div>

                    <p class="card-text text-muted small mb-2">@taskItem.Description</p>

                    <div class="row g-2 small">
                        <div class="col-6">
                            <span class="text-muted">Type:</span>
                            <div>@taskItem.TaskType</div>
                        </div>
                        <div class="col-6">
                            <span class="text-muted">Created:</span>
                            <div>@taskItem.CreatedDate.ToString("MMM dd, yyyy")</div>
                        </div>
                        <div class="col-6">
                            <span class="text-muted">Updated:</span>
                            <div>@(taskItem.UpdatedDate?.ToString("MMM dd, yyyy") ?? "N/A")</div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 mt-3">
                        <button class="btn btn-primary btn-sm"
                                @onclick="() => OnEdit.InvokeAsync(taskItem)">
                            <i class="bi bi-pencil me-2"></i>Edit
                        </button>
                        <button class="btn btn-danger btn-sm"
                                @onclick="() => OnDelete.InvokeAsync(taskItem)">
                            <i class="bi bi-trash me-2"></i>Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public List<TaskItemDto>? TaskItems { get; set; }

    [Parameter]
    public EventCallback<TaskItemDto> OnEdit { get; set; }

    [Parameter]
    public EventCallback<TaskItemDto> OnDelete { get; set; }
}
