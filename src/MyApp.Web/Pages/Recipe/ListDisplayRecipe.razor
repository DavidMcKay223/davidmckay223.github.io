@using MyApp.Application.DTOs.Food
@using MyApp.Application.Interfaces.Food
@inject IGeneratorPdf PdfGenerator
@inject HttpClient Http

<div class="container">
    <h1 class="my-4 text-center">Recipes</h1>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @if (RecipeIdList.Count > 0)
    {
        <button class="btn btn-secondary mb-3" @onclick="DownloadPdf"><i class="bi bi-download"></i>Download PDF</button>
    }

    <TableDisplayRecipe Recipes="Recipes" RecipeIdList="RecipeIdList" OnDisplay="ShowDisplayModal" AddRecipeToDownload="AddRecipeFromList" RemoveRecipeFromDownload="RemoveRecipeFromList" />
}

<DisplayModalRecipe @ref="displayModal" />

@code {
    private List<RecipeDto>? Recipes;
    private bool isLoading = true;
    private DisplayModalRecipe? displayModal;
    private List<RecipeDto> RecipeIdList = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        isLoading = true;

        Recipes = await Http.GetFromJsonAsync<List<RecipeDto>>("data/recipe_list.json");

        var recipesGroupedByMealSuggestion = Recipes!
            .SelectMany(recipe => recipe.MealSuggestions
                .Select(ms => new { ms.MealSuggestionId, Recipe = recipe }))
            .GroupBy(x => x.MealSuggestionId)
            .ToDictionary(g => g.Key, g => g.Select(x => x.Recipe)
            .ToList());
        
        foreach (var recipe in Recipes!)
        {
            foreach (var recipeMealSuggestion in recipe.MealSuggestions)
            {
                if (recipesGroupedByMealSuggestion.TryGetValue(recipeMealSuggestion.MealSuggestionId, out var relatedRecipes))
                {
                    // Add related recipes to the MealSuggestion's RecipeSuggestions list
                    recipeMealSuggestion.MealSuggestion = new MealSuggestionDto
                        {
                            Name = recipeMealSuggestion.MealSuggestion!.Name,
                            Description = recipeMealSuggestion.MealSuggestion!.Description,
                            MealSuggestionId = recipeMealSuggestion.MealSuggestionId,
                            RecipeSuggestions = relatedRecipes
                                .Where(r => r.RecipeId != recipe.RecipeId) // Exclude the current recipe
                                .Select(r => new RecipeMealSuggestionDto
                                {
                                    RecipeId = r.RecipeId,
                                    Recipe = r
                                })
                                .ToList()
                        };
                }
            }
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task DownloadPdf()
    {
        await PdfGenerator.RecipeListDownloadPdfAsync("recipe_document.pdf", RecipeIdList);
    }

    private async void ShowDisplayModal(RecipeDto id)
    {
        displayModal!.Show(id);
    }

    private async Task AddRecipeFromList(RecipeDto id)
    {
        RecipeIdList.Add(id);
    }

    private async Task RemoveRecipeFromList(RecipeDto id)
    {
        RecipeIdList.Remove(id);
    }
}
